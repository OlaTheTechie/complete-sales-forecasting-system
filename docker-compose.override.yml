version: '3'

services:
  # PostgreSQL for Airflow
  postgres:
    image: postgres:15
    platform: linux/arm64
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - airflow-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    networks:
      - airflow
    restart: unless-stopped

  # MLflow Tracking Server
  
  mlflow: 
    image: python:3.11-slim 
    platform: linux/arm64 
    command: >
      bash -c "pip install mlflow==2.9.2 psycopg2-binary boto3 &&
      export MLFLOW_S3_ENDPOINT_URL=http://minio:9000 &&
      mlflow server --host 0.0.0.0 --port 5001 \
        --backend-store-uri postgresql://mlflow:mlflow@mlflow-db:5432/mlflow \
        --default-artifact-root s3://mlflow-artifacts/ --serve-artifacts"
    ports:
      - '5001:5001'
    environment:
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      - mlflow-db
      - minio 
    networks:
      - airflow 
      - default 
    restart: unless-stopped 

  # PostgreSQL for MLflow
  mlflow-db:
    image: postgres:16-alpine
    platform: linux/arm64
    environment: 
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow
      POSTGRES_DB: mlflow 
    volumes: 
      - mlflow-db-volume:/var/lib/postgresql/data 
    healthcheck: 
      test: ['CMD', 'pg_isready', '-U', 'mlflow']
      interval: 5s
      retries: 5
    networks: 
      - airflow
      - default 
    restart: unless-stopped 

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    platform: linux/arm64
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio-data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - airflow
      - default
    restart: unless-stopped

  minio-mc:
    image: minio/mc:latest
    platform: linux/arm64
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/mlflow-artifacts || true;
      mc anonymous set public myminio/mlflow-artifacts;
      exit 0;
      "

  # redis (for Airflow)
  redis:
    image: redis:7-alpine
    platform: linux/arm64
    command: ["redis-server", "--ignore-warnings", "ARM64-COW-BUG"]
    expose:
      - 6379
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 30s
      retries: 50
    restart: unless-stopped


  # streamlit frontend
  streamlit-ui:
    image: python:3.11-slim
    platform: linux/arm64
    working_dir: /app
    command: >
      bash -c "
      apt-get update && apt-get install -y libgomp1 build-essential cmake &&
      pip install --no-cache-dir streamlit==1.29.0 pandas==2.1.4 numpy==1.24.3 scikit-learn==1.3.2 matplotlib==3.8.2 seaborn==0.13.0 plotly==5.18.0 mlflow==2.9.2 boto3==1.34.14 lightgbm==4.2.0 catboost==1.2.2 xgboost==2.0.3 &&
      chmod +x /app/entrypoint.sh &&
      /app/entrypoint.sh
      "
    ports:
      - '8501:8501'
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5001
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_DEFAULT_REGION=us-east-1
    volumes:
      - ./ui:/app
      - ./include:/usr/local/airflow/include:ro
    depends_on:
      - mlflow
      - minio
    restart: unless-stopped

# volumes & networks
volumes:
  airflow-db-volume:
  mlflow-db-volume:
  minio-data:

networks:
  airflow:
    external: true
    name: astro-sales-forecast
  default:
    name: astro-sales-forecast
